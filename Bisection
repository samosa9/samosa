/* Program for Bisection Method: Bisection Method */

#include<stdio.h>
#include<conio.h>
#include<math.h>
/*Function created for equations*/
float f(float x)
{

	Float fl;
	fl = pow(x,3) – x -4;
	return(fl);
}
/* Main Program */
Void main()
{
	float a,b,e,x0;
	int k;
	clrscr();
	printf(“\n Enter accuracy = ”);
	scanf(“%f”,&e);
	do
	{
		//To accept and reject the interval
		printf(“\n Enter interval a,b = ”);
		scanf(“%f%f”,&a,&b);
	}while(f(a)*f(b)>0.0); 
	k=1;
	do
	{
		x0=(a+b)/2.0;

printf(“\nN=%d a=%f b=%f x0=%f f(a)=%f f(b)=%f f(x0)=%f |b-a|=%f”,k,a,b,x0,f(a),f(b),f(x0),fabs(b-a));		
		
		if (f(a)*f(x0)<0.0)
		{
			b=x0;
		}
		else
		{
			a=x0;
		}

		k=k+1;

	}while(fabs(b-a)>e);


	printf(“\n Root of the equation is %f”,x0);
	printf(“\n Number of iterations required to achieve desired accuracy = %d ”,k);
	getch();
}



/* 	Output:
	Enter accuracy = 0.001
	Enter interval a, b = 1  2
	I=   a=   b=   x0=    f(x0)=    |b-a|=
	Root of the equation 1.7968
	Number of iterations required to achieve desired accuracy = 10 */


/* Program for False Position Method: False Position Method */
          #include<stdio.h>
          #include<conio.h>
          #include<math.h>

/*Function created for equations*/
float f(float x)
          {
		float fl;
          	fl =tan(x)+tanh(x);
       
		return(fl);
         }


/* Main Program */
void main()
{
	float x1,x2,e,x0,N;
	int k;
	clrscr();
	printf(“\n Enter accuracy = ”);
	scanf(“%f”,&e);
	
 	do
	{
		//To accept and reject the interval
		printf(“\n Enter interval x0,x1 = ”);
		scanf(“%f%f”,&x0,&x1);

	}while(f(x0)*f(x1)>0.0);
	
	k=1;
	do
	{
	x2 =x0 – ((f(x0)*(x1-x0))/(f(x1)-f(x0)));
printf(“\nI=%d\t x0=%f\t x1=%f\t x2=%f\t f(x2)=%f\t f(x0)=%f\t f(x1)=%f”, k,x0,x1,x2,f(x2),f(x0),f(x1));

	

	if (f(x0)*f(x2)<0.0)
	{
		x1=x2;
	}
	else
	{
		x0=x2;
	}
		k= k+1;
	}while(fabs(f(x2))>e);
	
	printf(“\nRoot of the equation is %f”,x2);
	printf(“\nNumber of iteration required to achieve desired accuracy = %d”, k);

	getch();
            }


/*	Output:
	Enter accuracy = 0.0001
	Enter interval x0,x1 = 1  2
	I=    x0=    x1=    x2=    f(x2)=    f(x0)=    f(x1)=
	Root of the equation is 1.796297
	Number of iterations required to achieve desired accuracy = 5   */

//Program for Lagrange’s Interpolation:
#include<stdio.h>
#include<conio.h>
#include<math.h>
void main()
{
	float x[15], y[15], sum, X, prod;
	int i, j, k, n;
	printf(“Enter the no. of points:\t”);
	scanf(“%d”,&n);

	printf(“Enter the values of x at which y is required : \t“);
	scanf(“%f”,&X);
	printf(“Enter the values of x and y:\t”);
	for(i=1;i<=n;i++)
	{
		scanf(“%f%f”,&x[i],&y[i]);
	}

	sum = 0;
	for(i=1;i<=n;i++)
	{
		prod = 1;
		for(j=1;j<=n;j++)
		{
			if(j!=i)
			{	
				prod = prod * (X – x[j])/(x[i] – x[j]);
			}

		}
		sum = sum + (prod*y[i]);
	}

	printf(“\nAt x = %f, \n y = %f”, X, sum);
	getch();

}
/*Output:
          Enter the no. of points: 4
          Enter the values of x at which y is required:  1.1
          Enter the values of x and y:    
                     1 	1
                  1.2    	1.0954
                  1.3	1.1402
                  1.5	1.2247
          At x = 1.100000,
               y = 1.048713 */




/* Newton Raphson Method */

#include<stdio.h>
#include<conio.h>
#include<math.h>


/* function for equation */
float f(float x)
{
	float fl;
 	fl=(x*x*x)-x-4.0; 

	return(fl);
}


/* function for derivative of the equation */
float df(float x)
{
	float dfl;
	dfl=(3*x*x)-1.0; 

	return(dfl);
}


/* Main Program */
main()
{
	float x[51],e;
	int k;
	clrscr();
	
	printf(“\n Enter accuracy = ”);
	scanf(“%f”,&e);
	printf(“\n Enter initial guess x0 = ”);
	scanf(“%f”,&x[0]);
	
	k=0;
	do
	{	
		x[k+1]=x[k]-(f(x[k])/(df(x[k])));
		printf(“\nI=%d x0=%f f(x0)=%f f’(x0)=%f x1=%f |x1-x0|=%f”, k+1,x[k],f(x[k]),x[k+1],fabs(x[k+1]-x[k]));
		k=k+1;
	}while(fabs(x[k]-x[k-1])>=e);

	printf(“\n Root of the equation = %f”,x[k]);
	printf(“\n Actual no. of iterations required = %d”,k);
	
	getch();
}

/* Output:
             Enter accuracy = 0.0001
             Enter initial guess x0 = 1.5
             I=    x0=    f(x0)=    f’(x0)=    x1=    |x1-x0|=
             Root of the equation = 1.7963219
             Number of iterations required to achieve desired accuracy = 5  */

//Program for Trapezoidal rule:

/*Trapezoidal Rule*/
#include<math.h>
#include<stdio.h>
#include<conio.h>

float f(float x)                       /*function*/
      {
	float a;
	a = 1.0/(1.0 + x);
	return(a);
       }

void main( )                              /*Main Program*/

      {
	float x0, xn, h, sum;
	int N, Ns;
	clrscr( );
printf(â€œ\n Enter lower & upper limit of xâ€);
scanf(â€œ%f%fâ€, &x0,&xn);
printf(â€œ\nEnter number of  intervals (N)â€);
scanf(â€œ%dâ€,&N);
h = ((xn â€“ x0)/N);
sum = 0.0;
do
{
	sum = sum + (h/2) * (f(x0) + f(x0+h));
	x0 = x0 + h;
}while(x0<xn);
printf(â€œArea = %fâ€,sum);
getch( );
         }
Output: 
           Enter lower & upper limit of x 
0	 6
           Enter number of intervals (N)
           6       
 Area = 2.02133
Program for Simpsonâ€™s 1/3rd rule:
/*Simpsonâ€™s 1/3rd rule */
#include<stdio.h>
#include<conio.h>
#include<math.h>
/*function*/
float f(float x)
{
	float a;
	a = 1.0 / (1.0 + x);
	return(a);
}

/*Main Program*/
voidmain()
{
float x0, xn, h, sum;
int N;
clrscr();
printf(â€œ\n Enter lower & upper limit of x â€œ);
scanf(â€œ%f%fâ€,&x0,&xn);
printf(â€œ\nEnter no. of intervals â€œ);
scanf(â€œ%dâ€,&N);
h = ((xn â€“ x0)/N);
sum = 0.0;

do
{
	sum = sum + (h/3) * (f(x0) + 4*f(x0+h) + f(x0 + 2*h));
	x0 = x0+2*h;
}while(x0<xn);
printf(â€œArea = %fâ€,sum);
getch();
} 

Output:
           Enter lower & upper limit of x : 0    6
           Enter no. of intervals 6

           Area = 1.9587

Runge kutta method
#include<stdio.h>
#include<conio.h>
#include<math.h>

/*Function - Equation*/
float f(float x, float y)
{

	float a;
	a = x + y;
	return(a);
}

/*Main Program*/
void main( )
{
	float x0, y0, xn, y1, h, k1, k2, k3, k4, k;
	clrscr();
	printf(â€œ\n Enter starting value of x & y i.e., xo, yoâ€);
	scanf(â€œ%f%fâ€, x0, y0);
	printf(â€œ\nEnter the value of x at which y is required â€œ);
	scanf(â€œ%fâ€,&xn);
	printf(â€œ\nEnter the step size â€œ);
	scanf(â€œ%fâ€, &h);

	do
	{
		k1 = h*f(x0,y0);
		k2 = h*f(x0+h/2, y0 + k1/2);
		k3 = h*f(x0+h/2,y0+k2/2);
		k4 = h*f(x0 + h, y0+k3);
		k= (k1+ 2*k2 + 2*k3 + k4)/6.0;
		y1 = y0 + k;
		y0 = y1;
		x0 = x0 +h;
		printf(â€œ\n The value of y = %f at x = %fâ€, y0,x0);

	}while(x0<xn);

	getch();
}
